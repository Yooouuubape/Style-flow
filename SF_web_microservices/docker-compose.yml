# Docker Compose file for Style Flow Microservices

services:
  # Database
  db:
    container_name: masters_pro_db
    image: postgres:14
    environment:
      POSTGRES_USER: salyukovgleb033
      POSTGRES_PASSWORD: v0AOP4yzg5rZVVUl
      POSTGRES_DB: "Style Flow"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount only the init script directly
      - ./init-scripts/run-init-scripts.sh:/docker-entrypoint-initdb.d/run-init-scripts.sh
      # Mount SQL files to a separate directory 
      - ./init-scripts:/init-scripts
    command: >
      bash -c "
        # Copy the init script to the entrypoint directory
        chmod +x /docker-entrypoint-initdb.d/run-init-scripts.sh &&
        # Start postgres
        docker-entrypoint.sh postgres
      "
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U salyukovgleb033"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - masters_pro_network

  # Zookeeper
  zookeeper:
    container_name: masters_pro_zookeeper
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - masters_pro_network

  # Kafka
  kafka:
    container_name: masters_pro_kafka
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - masters_pro_network

  # Kafka UI
  kafka-ui:
    container_name: masters_pro_kafka_ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: masters_pro
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - masters_pro_network

  # API Gateway
  gateway:
    container_name: masters_pro_gateway
    build:
      context: ./gateway-service
    depends_on:
      - user
      - auth
      - event
      - resource
      - client
      - payment
    ports:
      - "8000:8000"
    networks:
      - masters_pro_network

  # Admin Dashboard
  admin-dashboard:
    container_name: masters_pro_admin
    build:
      context: ./admin-dashboard
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://salyukovgleb033:v0AOP4yzg5rZVVUl@db:5432/user_service
      SECRET_KEY: ${ADMIN_SECRET_KEY:-admin_dashboard_secret_key}
      POSTGRES_PASSWORD: v0AOP4yzg5rZVVUl
    ports:
      - "5050:5000"
    networks:
      - masters_pro_network

  # Authentication Service
  auth:
    container_name: masters_pro_auth
    build:
      context: ./auth-service
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://salyukovgleb033:v0AOP4yzg5rZVVUl@db:5432/auth_service
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - masters_pro_network

  # User Service
  user:
    container_name: masters_pro_user
    build:
      context: ./user-service
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://salyukovgleb033:v0AOP4yzg5rZVVUl@db:5432/user_service
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - masters_pro_network

  # Event Service
  event:
    container_name: masters_pro_event
    build:
      context: ./event-service
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://salyukovgleb033:v0AOP4yzg5rZVVUl@db:5432/event_service
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - masters_pro_network

  # Resource Service
  resource:
    container_name: masters_pro_resource
    build:
      context: ./resource-service
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://salyukovgleb033:v0AOP4yzg5rZVVUl@db:5432/resource_service
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - masters_pro_network

  # Client Service
  client:
    container_name: masters_pro_client
    build:
      context: ./client-service
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://salyukovgleb033:v0AOP4yzg5rZVVUl@db:5432/client_service
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - masters_pro_network

  # Payment Service
  payment:
    container_name: masters_pro_payment
    build:
      context: ./payment-service
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://salyukovgleb033:v0AOP4yzg5rZVVUl@db:5432/payment_service
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - masters_pro_network

volumes:
  postgres_data:

networks:
  masters_pro_network:
    driver: bridge 